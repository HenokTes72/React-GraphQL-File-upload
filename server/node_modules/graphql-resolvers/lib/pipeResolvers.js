"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Resolver composition based on the root argument.
 *
 * @param {[Function]} ...funcs Resolver implementations.
 * @return {Promise}.
 */
var pipeResolvers = exports.pipeResolvers = function pipeResolvers() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return funcs.reduce(function (prevPromise, resolver) {
      return prevPromise.then(function (root) {
        return root instanceof Error ? root : resolver.apply(undefined, [root].concat(_toConsumableArray(args.slice(1))));
      });
    }, Promise.resolve(args[0]));
  };
};